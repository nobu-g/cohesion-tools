name: Build

on: [ push, pull_request ]

jobs:
  build:
    name: Build the project
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 15
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build package
        run: uv build -o dist
      - name: Install virtualenv and create virtual environment
        run: |
          pipx install --system-site-packages virtualenv
          virtualenv -p ${{ matrix.python-version }} .venv
      - name: Install package from wheel (non-Windows)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          source .venv/bin/activate
          wheelFile=$(ls dist/*.whl)
          pip install "${wheelFile}[eval]"
      - name: Install package from wheel (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          .\.venv\Scripts\Activate
          $wheelFile = (Get-ChildItem -Path dist -Filter *.whl).FullName
          pip install "${wheelFile}[eval]"
        shell: pwsh
      - name: Import package (non-Windows)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          source .venv/bin/activate
          python -c "import cohesion_tools"
      - name: Import package (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          .\.venv\Scripts\Activate
          python -c "import cohesion_tools"
        shell: pwsh
